version: '3.8'

services:
  server:
    build:
      context: ./Messenger
      dockerfile: Messenger/Dockerfile
    expose:
      - "8080"
      - "8081"
    environment:
      - ASPNETCORE_URLS=http://+:8080
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__DefaultConnection=Host=db;Port=5432;Database=Whithin;Username=postgres;Password=1000-7
      - LISTEN_IP=0.0.0.0
      - ANNOUNCED_IP=4931257-dv98943.twc1.net
    volumes:
      - ./Messenger/Messenger/Uploads:/app/Uploads
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - client
      - server
    networks:
      - app-network
    restart: unless-stopped

  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    expose:
      - "80"
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=http://4931257-dv98943.twc1.net
    networks:
      - app-network
    depends_on:
      - server
    restart: unless-stopped

  db:
    image: postgres:16-alpine
    environment:
      - POSTGRES_DB=Whithin
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=1000-7
    expose:
      - "5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
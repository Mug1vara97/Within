// <auto-generated />
using System;
using Messenger.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Messenger.Migrations
{
    [DbContext(typeof(MessengerContext))]
    [Migration("20250705115325_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Messenger.Models.AuditLog", b =>
                {
                    b.Property<long>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("log_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("LogId"));

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("action_type");

                    b.Property<string>("Changes")
                        .HasColumnType("jsonb")
                        .HasColumnName("changes");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("ServerId")
                        .HasColumnType("integer")
                        .HasColumnName("server_id");

                    b.Property<int?>("TargetId")
                        .HasColumnType("integer")
                        .HasColumnName("target_id");

                    b.Property<string>("TargetType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("target_type");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("LogId")
                        .HasName("audit_logs_pkey");

                    b.HasIndex("ServerId");

                    b.HasIndex("UserId");

                    b.ToTable("audit_logs", (string)null);
                });

            modelBuilder.Entity("Messenger.Models.Chat", b =>
                {
                    b.Property<int>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("chat_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ChatId"));

                    b.Property<string>("AllowedRoleIds")
                        .HasColumnType("text")
                        .HasColumnName("allowedroleids");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<int?>("ChatOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("chat_order");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("boolean")
                        .HasColumnName("isprivate");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int?>("ServerId")
                        .HasColumnType("integer")
                        .HasColumnName("server_id");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    b.HasKey("ChatId")
                        .HasName("chats_pkey");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ServerId");

                    b.HasIndex("TypeId");

                    b.ToTable("chats", (string)null);
                });

            modelBuilder.Entity("Messenger.Models.ChatCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("AllowedRoleIds")
                        .HasColumnType("text")
                        .HasColumnName("allowedroleids");

                    b.Property<string>("AllowedUserIds")
                        .HasColumnType("text")
                        .HasColumnName("alloweduserids");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("category_name");

                    b.Property<int>("CategoryOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("category_order");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("boolean")
                        .HasColumnName("isprivate");

                    b.Property<int>("ServerId")
                        .HasColumnType("integer")
                        .HasColumnName("server_id");

                    b.HasKey("CategoryId")
                        .HasName("chat_categories_pkey");

                    b.HasIndex("ServerId");

                    b.ToTable("chat_categories", (string)null);
                });

            modelBuilder.Entity("Messenger.Models.ChatType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("type_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TypeId"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("type_name");

                    b.HasKey("TypeId")
                        .HasName("chat_types_pkey");

                    b.HasIndex(new[] { "TypeName" }, "chat_types_type_name_key")
                        .IsUnique();

                    b.ToTable("chat_types", (string)null);

                    b.HasData(
                        new
                        {
                            TypeId = 1,
                            TypeName = "direct"
                        },
                        new
                        {
                            TypeId = 2,
                            TypeName = "group"
                        },
                        new
                        {
                            TypeId = 3,
                            TypeName = "text_chanel"
                        },
                        new
                        {
                            TypeId = 4,
                            TypeName = "voice_chanel"
                        });
                });

            modelBuilder.Entity("Messenger.Models.Member", b =>
                {
                    b.Property<long>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("member_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("MemberId"));

                    b.Property<int>("ChatId")
                        .HasColumnType("integer")
                        .HasColumnName("chat_id");

                    b.Property<DateTime?>("JoinedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("joined_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("MemberId")
                        .HasName("members_pkey");

                    b.HasIndex("ChatId");

                    b.HasIndex(new[] { "UserId", "ChatId" }, "members_user_id_chat_id_key")
                        .IsUnique();

                    b.ToTable("members", (string)null);
                });

            modelBuilder.Entity("Messenger.Models.Message", b =>
                {
                    b.Property<long>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("message_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("MessageId"));

                    b.Property<int>("ChatId")
                        .HasColumnType("integer")
                        .HasColumnName("chat_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("ContentType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("content_type");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("ForwardedByUserId")
                        .HasColumnType("integer")
                        .HasColumnName("forwardedbyuserid");

                    b.Property<int?>("ForwardedFromChatId")
                        .HasColumnType("integer")
                        .HasColumnName("forwardedfromchatid");

                    b.Property<long?>("ForwardedFromMessageId")
                        .HasColumnType("bigint")
                        .HasColumnName("forwardedfrommessageid");

                    b.Property<string>("ForwardedMessageContent")
                        .HasColumnType("text")
                        .HasColumnName("forwardedmessagecontent");

                    b.Property<long?>("RepliedToMessageId")
                        .HasColumnType("bigint")
                        .HasColumnName("repliedtomessageid");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("MessageId")
                        .HasName("messages_pkey");

                    b.HasIndex("ChatId");

                    b.HasIndex("ForwardedByUserId");

                    b.HasIndex("ForwardedFromChatId");

                    b.HasIndex("ForwardedFromMessageId");

                    b.HasIndex("RepliedToMessageId");

                    b.HasIndex("UserId");

                    b.ToTable("messages", (string)null);
                });

            modelBuilder.Entity("Messenger.Models.MessageRead", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("MessageId")
                        .HasColumnType("bigint")
                        .HasColumnName("message_id");

                    b.Property<DateTime>("ReadAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("read_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("message_reads_pkey");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "MessageId", "UserId" }, "message_reads_message_id_user_id_key")
                        .IsUnique();

                    b.ToTable("message_reads", (string)null);
                });

            modelBuilder.Entity("Messenger.Models.Server", b =>
                {
                    b.Property<int>("ServerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("server_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ServerId"));

                    b.Property<string>("Avatar")
                        .HasColumnType("text")
                        .HasColumnName("avatar");

                    b.Property<string>("Banner")
                        .HasColumnType("text")
                        .HasColumnName("banner");

                    b.Property<string>("BannerColor")
                        .HasColumnType("text")
                        .HasColumnName("bannercolor");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean")
                        .HasColumnName("ispublic");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer")
                        .HasColumnName("owner_id");

                    b.HasKey("ServerId")
                        .HasName("servers_pkey");

                    b.HasIndex("OwnerId");

                    b.ToTable("servers", (string)null);
                });

            modelBuilder.Entity("Messenger.Models.ServerAuditLog", b =>
                {
                    b.Property<int>("AuditLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("audit_log_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AuditLogId"));

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("action_type");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("details");

                    b.Property<int>("ServerId")
                        .HasColumnType("integer")
                        .HasColumnName("server_id");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("AuditLogId")
                        .HasName("server_audit_logs_pkey");

                    b.HasIndex("ServerId");

                    b.HasIndex("UserId");

                    b.ToTable("server_audit_logs", (string)null);
                });

            modelBuilder.Entity("Messenger.Models.ServerMember", b =>
                {
                    b.Property<long>("ServerMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("server_member_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ServerMemberId"));

                    b.Property<DateTime?>("JoinedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("joined_at")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("ServerId")
                        .HasColumnType("integer")
                        .HasColumnName("server_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("ServerMemberId")
                        .HasName("server_members_pkey");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "ServerId", "UserId" }, "server_members_server_id_user_id_key")
                        .IsUnique();

                    b.ToTable("server_members", (string)null);
                });

            modelBuilder.Entity("Messenger.Models.ServerRole", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Color")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("color")
                        .HasDefaultValueSql("'#99AAB5'::character varying");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Permissions")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasColumnName("permissions")
                        .HasDefaultValueSql("'{}'::jsonb");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("role_name");

                    b.Property<int>("ServerId")
                        .HasColumnType("integer")
                        .HasColumnName("server_id");

                    b.HasKey("RoleId")
                        .HasName("server_roles_pkey");

                    b.HasIndex(new[] { "ServerId", "RoleName" }, "server_roles_server_id_role_name_key")
                        .IsUnique();

                    b.ToTable("server_roles", (string)null);
                });

            modelBuilder.Entity("Messenger.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("username");

                    b.HasKey("UserId")
                        .HasName("users_pkey");

                    b.HasIndex(new[] { "Username" }, "users_username_key")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Messenger.Models.UserProfile", b =>
                {
                    b.Property<int>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("profile_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProfileId"));

                    b.Property<string>("Avatar")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("avatar");

                    b.Property<string>("AvatarColor")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasColumnName("avatar_color")
                        .HasDefaultValueSql("'#5865F2'::character varying");

                    b.Property<string>("Banner")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("banner");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("ProfileId")
                        .HasName("user_profiles_pkey");

                    b.HasIndex(new[] { "UserId" }, "user_profiles_user_id_key")
                        .IsUnique();

                    b.ToTable("user_profiles", (string)null);
                });

            modelBuilder.Entity("Messenger.Models.UserServerOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Position")
                        .HasColumnType("integer")
                        .HasColumnName("position");

                    b.Property<int>("ServerId")
                        .HasColumnType("integer")
                        .HasColumnName("server_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("user_server_orders_pkey");

                    b.HasIndex("ServerId");

                    b.HasIndex(new[] { "UserId", "ServerId" }, "user_server_orders_user_id_server_id_key")
                        .IsUnique();

                    b.ToTable("user_server_orders", (string)null);
                });

            modelBuilder.Entity("Messenger.Models.UserServerRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("ServerId")
                        .HasColumnType("integer")
                        .HasColumnName("server_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<DateTime?>("AssignedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("assigned_at")
                        .HasDefaultValueSql("now()");

                    b.HasKey("UserId", "ServerId", "RoleId")
                        .HasName("user_server_roles_pkey");

                    b.HasIndex("RoleId");

                    b.HasIndex("ServerId");

                    b.ToTable("user_server_roles", (string)null);
                });

            modelBuilder.Entity("Messenger.Models.AuditLog", b =>
                {
                    b.HasOne("Messenger.Models.Server", "Server")
                        .WithMany("AuditLogs")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("audit_logs_server_id_fkey");

                    b.HasOne("Messenger.Models.User", "User")
                        .WithMany("AuditLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("audit_logs_user_id_fkey");

                    b.Navigation("Server");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Messenger.Models.Chat", b =>
                {
                    b.HasOne("Messenger.Models.ChatCategory", "Category")
                        .WithMany("Chats")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("chats_category_id_fkey");

                    b.HasOne("Messenger.Models.Server", "Server")
                        .WithMany("Chats")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("chats_server_id_fkey");

                    b.HasOne("Messenger.Models.ChatType", "Type")
                        .WithMany("Chats")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("chats_type_id_fkey");

                    b.Navigation("Category");

                    b.Navigation("Server");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Messenger.Models.ChatCategory", b =>
                {
                    b.HasOne("Messenger.Models.Server", "Server")
                        .WithMany("ChatCategories")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("chat_categories_server_id_fkey");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("Messenger.Models.Member", b =>
                {
                    b.HasOne("Messenger.Models.Chat", "Chat")
                        .WithMany("Members")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("members_chat_id_fkey");

                    b.HasOne("Messenger.Models.User", "User")
                        .WithMany("Members")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("members_user_id_fkey");

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Messenger.Models.Message", b =>
                {
                    b.HasOne("Messenger.Models.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("messages_chat_id_fkey");

                    b.HasOne("Messenger.Models.User", "ForwardedByUser")
                        .WithMany()
                        .HasForeignKey("ForwardedByUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("messages_forwarded_by_user_id_fkey");

                    b.HasOne("Messenger.Models.Chat", "ForwardedFromChat")
                        .WithMany()
                        .HasForeignKey("ForwardedFromChatId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("messages_forwarded_from_chat_id_fkey");

                    b.HasOne("Messenger.Models.Message", "ForwardedFromMessage")
                        .WithMany()
                        .HasForeignKey("ForwardedFromMessageId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("messages_forwarded_from_message_id_fkey");

                    b.HasOne("Messenger.Models.Message", "RepliedToMessage")
                        .WithMany("Replies")
                        .HasForeignKey("RepliedToMessageId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("messages_replied_to_message_id_fkey");

                    b.HasOne("Messenger.Models.User", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("messages_user_id_fkey");

                    b.Navigation("Chat");

                    b.Navigation("ForwardedByUser");

                    b.Navigation("ForwardedFromChat");

                    b.Navigation("ForwardedFromMessage");

                    b.Navigation("RepliedToMessage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Messenger.Models.MessageRead", b =>
                {
                    b.HasOne("Messenger.Models.Message", "Message")
                        .WithMany("MessageReads")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("message_reads_message_id_fkey");

                    b.HasOne("Messenger.Models.User", "User")
                        .WithMany("MessageReads")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("message_reads_user_id_fkey");

                    b.Navigation("Message");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Messenger.Models.Server", b =>
                {
                    b.HasOne("Messenger.Models.User", "Owner")
                        .WithMany("Servers")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("servers_owner_id_fkey");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Messenger.Models.ServerAuditLog", b =>
                {
                    b.HasOne("Messenger.Models.Server", "Server")
                        .WithMany("ServerAuditLogs")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("server_audit_logs_server_id_fkey");

                    b.HasOne("Messenger.Models.User", "User")
                        .WithMany("ServerAuditLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("server_audit_logs_user_id_fkey");

                    b.Navigation("Server");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Messenger.Models.ServerMember", b =>
                {
                    b.HasOne("Messenger.Models.Server", "Server")
                        .WithMany("ServerMembers")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("server_members_server_id_fkey");

                    b.HasOne("Messenger.Models.User", "User")
                        .WithMany("ServerMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("server_members_user_id_fkey");

                    b.Navigation("Server");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Messenger.Models.ServerRole", b =>
                {
                    b.HasOne("Messenger.Models.Server", "Server")
                        .WithMany("ServerRoles")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("server_roles_server_id_fkey");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("Messenger.Models.UserProfile", b =>
                {
                    b.HasOne("Messenger.Models.User", "User")
                        .WithOne("UserProfile")
                        .HasForeignKey("Messenger.Models.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_profiles_user_id_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Messenger.Models.UserServerOrder", b =>
                {
                    b.HasOne("Messenger.Models.Server", "Server")
                        .WithMany("UserServerOrders")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_server_orders_server_id_fkey");

                    b.HasOne("Messenger.Models.User", "User")
                        .WithMany("UserServerOrders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_server_orders_user_id_fkey");

                    b.Navigation("Server");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Messenger.Models.UserServerRole", b =>
                {
                    b.HasOne("Messenger.Models.ServerRole", "Role")
                        .WithMany("UserServerRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_server_roles_role_id_fkey");

                    b.HasOne("Messenger.Models.Server", "Server")
                        .WithMany("UserServerRoles")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_server_roles_server_id_fkey");

                    b.HasOne("Messenger.Models.User", "User")
                        .WithMany("UserServerRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_server_roles_user_id_fkey");

                    b.Navigation("Role");

                    b.Navigation("Server");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Messenger.Models.Chat", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Messenger.Models.ChatCategory", b =>
                {
                    b.Navigation("Chats");
                });

            modelBuilder.Entity("Messenger.Models.ChatType", b =>
                {
                    b.Navigation("Chats");
                });

            modelBuilder.Entity("Messenger.Models.Message", b =>
                {
                    b.Navigation("MessageReads");

                    b.Navigation("Replies");
                });

            modelBuilder.Entity("Messenger.Models.Server", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("ChatCategories");

                    b.Navigation("Chats");

                    b.Navigation("ServerAuditLogs");

                    b.Navigation("ServerMembers");

                    b.Navigation("ServerRoles");

                    b.Navigation("UserServerOrders");

                    b.Navigation("UserServerRoles");
                });

            modelBuilder.Entity("Messenger.Models.ServerRole", b =>
                {
                    b.Navigation("UserServerRoles");
                });

            modelBuilder.Entity("Messenger.Models.User", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("Members");

                    b.Navigation("MessageReads");

                    b.Navigation("Messages");

                    b.Navigation("ServerAuditLogs");

                    b.Navigation("ServerMembers");

                    b.Navigation("Servers");

                    b.Navigation("UserProfile");

                    b.Navigation("UserServerOrders");

                    b.Navigation("UserServerRoles");
                });
#pragma warning restore 612, 618
        }
    }
}

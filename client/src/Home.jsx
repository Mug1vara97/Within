import React, { useState, useEffect, useRef, useMemo } from 'react';
import ChatList from './ChatList';
import ServerList from './ServerList';
import ServerPage from './ServerPage';
import DiscoverLists from './Discover/DiscoverLists';
import { Routes, Route, useParams, useLocation, useNavigate } from 'react-router-dom';
import VoiceChat from './VoiceChat';
import GroupChat from './Chats/GroupChat';

const Home = ({ user }) => {
    const [isDiscoverMode, setIsDiscoverMode] = useState(false);
    const location = useLocation();
    const navigate = useNavigate();
    const [voiceRoom, setVoiceRoom] = useState(() => {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞ –∏–∑ localStorage
        const savedVoiceRoom = localStorage.getItem('voiceRoom');
        try {
            return savedVoiceRoom ? JSON.parse(savedVoiceRoom) : null;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞:', error);
            return null;
        }
    });
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—ã—Ö–æ–¥–µ –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    const [leftVoiceChannel, setLeftVoiceChannel] = useState(false);
    
    // –°–æ—Å—Ç–æ—è–Ω–∏—è –º—å—é—Ç–∞ –¥–ª—è UserPanel (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –∏–∑ localStorage)
    const [isMuted, setIsMuted] = useState(() => {
        const saved = localStorage.getItem('localMuted');
        return saved ? JSON.parse(saved) : false;
    });
    const [isAudioEnabled, setIsAudioEnabled] = useState(() => {
        const saved = localStorage.getItem('localAudioEnabled');
        return saved ? JSON.parse(saved) : true;
    });
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö
    const [voiceChannelUsers, setVoiceChannelUsers] = useState({});
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (–Ω—É–∂–Ω–æ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è VoiceChat)
    const [selectedServerChat, setSelectedServerChat] = useState(null);
    
    // –õ–æ–∫–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ (–Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–µ –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞)
    const [localMuted, setLocalMuted] = useState(() => {
        const saved = localStorage.getItem('localMuted');
        return saved ? JSON.parse(saved) : false;
    });
    const [localAudioEnabled, setLocalAudioEnabled] = useState(() => {
        const saved = localStorage.getItem('localAudioEnabled');
        return saved ? JSON.parse(saved) : true;
    });
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ª–∏ VoiceChat –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–æ–≤)
    const isVoiceChatVisible = useMemo(() => {
        console.log('üîç isVoiceChatVisible calculation:', { 
            voiceRoom: !!voiceRoom, 
            pathname: location.pathname,
            voiceRoomData: voiceRoom,
            selectedServerChat
        });
        
        if (!voiceRoom) {
            console.log('No voice room - hiding voice chat');
            return false;
        }
        
        // –í –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –≥–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç –≤—Å–µ–≥–¥–∞ —Å–∫—Ä—ã—Ç (–¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä–Ω–æ–º—É –∫–∞–Ω–∞–ª—É)
        if (location.pathname.startsWith('/channels/@me')) {
            console.log('Personal messages - hiding voice chat');
            return false;
        }
        
        // –ù–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É
        if (location.pathname.startsWith('/channels/')) {
            const pathParts = location.pathname.split('/');
            const serverId = pathParts[2];
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (serverId –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å @me)
            if (serverId === '@me') {
                console.log('Personal messages detected by serverId - hiding voice chat');
                return false;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –Ω–∞ —Ç–æ–º –∂–µ —Å–µ—Ä–≤–µ—Ä–µ
            const onSameServer = voiceRoom.serverId && String(voiceRoom.serverId) === String(serverId);
            if (!onSameServer) {
                console.log('Not on same server as voice room');
                return false;
            }
            
            // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª - —Å–∫—Ä—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç
            if (selectedServerChat && (selectedServerChat.chatType === 3 || selectedServerChat.typeId === 3)) {
                console.log('Text channel selected - hiding voice chat');
                return false;
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç –µ—Å–ª–∏:
            // 1. –í—ã–±—Ä–∞–Ω –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª –ò–õ–ò
            // 2. –ù–µ –≤—ã–±—Ä–∞–Ω –Ω–∏–∫–∞–∫–æ–π –∫–∞–Ω–∞–ª, –Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É
            const isVisible = !selectedServerChat || (selectedServerChat.chatType === 4 || selectedServerChat.typeId === 4);
            
            console.log('Server voice chat visibility check:', { 
                serverId, 
                voiceRoomId: voiceRoom.roomId, 
                voiceServerId: voiceRoom.serverId,
                serverIdMatch: onSameServer,
                selectedServerChat,
                selectedChatType: selectedServerChat?.chatType || selectedServerChat?.typeId,
                isVisible 
            });
            return isVisible;
        }
        
        console.log('Default case - hiding voice chat');
        return false;
    }, [voiceRoom, location.pathname, selectedServerChat]);
    
    console.log('üéôÔ∏è Final isVoiceChatVisible:', isVoiceChatVisible);
    
    // Ref –¥–ª—è VoiceChat
    const voiceChatRef = useRef(null);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É
    const handleJoinVoiceChannel = (data) => {
        setVoiceRoom(data);
        setLeftVoiceChannel(false);
    };
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞ –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    const handleLeaveVoiceChannel = () => {
        setVoiceRoom(null);
        setLeftVoiceChannel(true);
        // –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –º—å—é—Ç–∞ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        // setIsMuted(false);
        // setIsAudioEnabled(true);
        
        // –£–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±—Ä–æ—Å - –Ω–∞–¥–ø–∏—Å—å –±—É–¥–µ—Ç –≤–∏—Å–µ—Ç—å –¥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
    };
    
    // –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º—å—é—Ç–æ–º –¥–ª—è UserPanel
    const handleToggleMute = () => {
        if (voiceRoom && voiceChatRef.current && voiceChatRef.current.handleMute) {
            // –ï—Å–ª–∏ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —á–∞—Ç–µ - —É–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–º –º—å—é—Ç–æ–º
            voiceChatRef.current.handleMute();
        } else {
            // –ï—Å–ª–∏ –Ω–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —á–∞—Ç–µ - —É–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
            setLocalMuted(!localMuted);
        }
    };
    
    const handleToggleAudio = () => {
        if (voiceRoom && voiceChatRef.current && voiceChatRef.current.toggleAudio) {
            // –ï—Å–ª–∏ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —á–∞—Ç–µ - —É–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–º –∑–≤—É–∫–æ–º
            voiceChatRef.current.toggleAudio();
        } else {
            // –ï—Å–ª–∏ –Ω–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —á–∞—Ç–µ - —É–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
            setLocalAudioEnabled(!localAudioEnabled);
        }
    };
    
    // –ö–æ–ª–ª–±–µ–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –æ—Ç VoiceChat
    const handleMuteStateChange = (muted) => {
        setIsMuted(muted);
    };
    
    const handleAudioStateChange = (enabled) => {
        setIsAudioEnabled(enabled);
    };

    // –ö–æ–ª–ª–±–µ–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ
    const handleVoiceChannelUsersChange = (roomId, users) => {
        setVoiceChannelUsers(prev => ({
            ...prev,
            [roomId]: users
        }));
    };



    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞ –≤ localStorage
    useEffect(() => {
        if (voiceRoom) {
            localStorage.setItem('voiceRoom', JSON.stringify(voiceRoom));
        } else {
            localStorage.removeItem('voiceRoom');
        }
    }, [voiceRoom]);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ localStorage
    useEffect(() => {
        localStorage.setItem('localMuted', JSON.stringify(localMuted));
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –µ—Å–ª–∏ –Ω–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —á–∞—Ç–µ
        if (!voiceRoom) {
            setIsMuted(localMuted);
        }
    }, [localMuted, voiceRoom]);
    
    useEffect(() => {
        localStorage.setItem('localAudioEnabled', JSON.stringify(localAudioEnabled));
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –µ—Å–ª–∏ –Ω–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —á–∞—Ç–µ
        if (!voiceRoom) {
            setIsAudioEnabled(localAudioEnabled);
        }
    }, [localAudioEnabled, voiceRoom]);

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º –º–∞—Ä—à—Ä—É—Ç–æ–º
    useEffect(() => {
        if ((location.pathname === '/discover' || location.pathname === '/discover/servers') && !isDiscoverMode) {
            setIsDiscoverMode(true);
        } else if (!location.pathname.startsWith('/discover') && isDiscoverMode) {
            setIsDiscoverMode(false);
        }
    }, [location.pathname, isDiscoverMode]);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞
    useEffect(() => {
        // –í—Å–µ–≥–¥–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–∏ —Å–º–µ–Ω–µ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –ª–æ–≥–∏–∫–∏
        setSelectedServerChat(null);
    }, [location.pathname]);

    const handleDiscoverModeChange = (mode) => {
        setIsDiscoverMode(mode);
        if (!mode) {
            navigate('/channels/@me');
        }
    };



    return (
        <div className="home-container">
            <ServerList 
                userId={user?.userId} 
                onDiscoverClick={handleDiscoverModeChange}
            />
            
            <div className="main-content" style={{ width: '100%', display: 'flex' }}>
                {isDiscoverMode ? (
                    <Routes>
                        <Route path="/discover" element={<DiscoverLists userId={user?.userId} onBack={() => handleDiscoverModeChange(false)} />} />
                        <Route path="/discover/servers" element={<DiscoverLists userId={user?.userId} onBack={() => handleDiscoverModeChange(false)} />} />
                    </Routes>
                ) : (
                    <>
                        <Routes>
                            <Route path="/channels/@me/:chatId?" element={
                                <ChatListWrapper 
                                    user={user} 
                                    onJoinVoiceChannel={handleJoinVoiceChannel}
                                    voiceRoom={voiceRoom}
                                    leftVoiceChannel={leftVoiceChannel}
                                    setLeftVoiceChannel={setLeftVoiceChannel}
                                    isMuted={voiceRoom ? isMuted : localMuted}
                                    isAudioEnabled={voiceRoom ? isAudioEnabled : localAudioEnabled}
                                    onToggleMute={handleToggleMute}
                                    onToggleAudio={handleToggleAudio}
                                />
                            } />
                            <Route path="/channels/:serverId/:chatId?" element={
                                <ServerPageWrapper 
                                    user={user} 
                                    onJoinVoiceChannel={handleJoinVoiceChannel}
                                    voiceRoom={voiceRoom}
                                    isVoiceChatVisible={isVoiceChatVisible}
                                    leftVoiceChannel={leftVoiceChannel}
                                    setLeftVoiceChannel={setLeftVoiceChannel}
                                    isMuted={voiceRoom ? isMuted : localMuted}
                                    isAudioEnabled={voiceRoom ? isAudioEnabled : localAudioEnabled}
                                    onToggleMute={handleToggleMute}
                                    onToggleAudio={handleToggleAudio}
                                    voiceChannelUsers={voiceChannelUsers}
                                    onServerChatSelected={setSelectedServerChat}
                                />
                            } />
                        </Routes>
                        

                        
                        {/* –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π VoiceChat - –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ */}
                        {voiceRoom && (
                            <VoiceChat
                                ref={voiceChatRef}
                                key={`${voiceRoom.roomId}-${voiceRoom.serverId || 'direct'}-unified`}
                                roomId={voiceRoom.roomId}
                                roomName={voiceRoom.roomName}
                                userName={voiceRoom.userName}
                                userId={voiceRoom.userId}
                                serverId={voiceRoom.serverId}
                                autoJoin={true}
                                showUI={true}
                                isVisible={isVoiceChatVisible}
                                onLeave={handleLeaveVoiceChannel}
                                onMuteStateChange={handleMuteStateChange}
                                onAudioStateChange={handleAudioStateChange}
                                initialMuted={localMuted}
                                initialAudioEnabled={localAudioEnabled}
                                onVoiceChannelUsersChange={handleVoiceChannelUsersChange}
                            />
                        )}                       

                    </>
                )}
            </div>
        </div>
    );
};

const ChatListWrapper = ({ user, onJoinVoiceChannel, voiceRoom, leftVoiceChannel, setLeftVoiceChannel, isMuted, isAudioEnabled, onToggleMute, onToggleAudio }) => {
    console.log('üì± ChatListWrapper rendering:', { voiceRoom: !!voiceRoom, leftVoiceChannel });
    // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—ã—Ö–æ–¥–µ –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    const LeftVoiceChannelComponent = () => (
        <div style={{
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            justifyContent: 'center',
            height: '100%',
            width: '100%',
            backgroundColor: '#36393f',
            color: '#dcddde'
        }}>
            <h2 style={{ margin: '0 0 16px 0', fontSize: '24px', fontWeight: '600' }}>
                –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª
            </h2>
            <p style={{ margin: 0, fontSize: '16px', color: '#8e9297' }}>
                –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            </p>
        </div>
    );
    const { chatId } = useParams();
    const chatListRef = useRef(null);
    const [selectedChat, setSelectedChat] = useState(null);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ –∏–∑ ChatList
    const handleChatSelected = (chat) => {
        if (chat) {
            setSelectedChat({
                chatId: chat.chat_id,
                groupName: chat.username,
                chatType: chat.isGroupChat ? 2 : 1,
                typeId: chat.chatType
            });
            
            // –£–±–∏—Ä–∞–µ–º –Ω–∞–¥–ø–∏—Å—å –æ –≤—ã—Ö–æ–¥–µ –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ª—é–±–æ–≥–æ —á–∞—Ç–∞
            setLeftVoiceChannel(false);
            
            // –ï—Å–ª–∏ —ç—Ç–æ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª, –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –Ω–µ–º—É
            if (chat.chatType === 4 || chat.typeId === 4) {
                onJoinVoiceChannel({
                    roomId: chat.chat_id,
                    roomName: chat.username || chat.name, // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã
                    userName: user.username,
                    userId: user.userId
                });
            }
        }
    };
    
    return (
        <div style={{ display: 'flex', width: '100%', height: '100%' }}>
            <div style={{ width: '240px', minWidth: '240px', borderRight: '1px solid #2f3136' }}>
                <ChatList 
                    userId={user?.userId} 
                    username={user?.username} 
                    initialChatId={chatId}
                    ref={chatListRef}
                    onChatSelected={handleChatSelected}
                    voiceRoom={voiceRoom}
                    isMuted={isMuted}
                    isAudioEnabled={isAudioEnabled}
                    onToggleMute={onToggleMute}
                    onToggleAudio={onToggleAudio}
                />
            </div>
            <div style={{ flex: 1, width: 'calc(100% - 240px)', height: '100%' }}>
                {/* –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã—Ö–æ–¥–µ –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ */}
                {leftVoiceChannel && !voiceRoom ? (
                    <LeftVoiceChannelComponent />
                ) : (
                    <>

                        
                        {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º GroupChat –µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç */}
                        {selectedChat && (
                            <GroupChat
                                username={user?.username}
                                userId={user?.userId}
                                chatId={selectedChat.chatId}
                                groupName={selectedChat.groupName || selectedChat.name}
                                isServerChat={false}
                            />
                        )}
                        
                        {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –µ—Å–ª–∏ –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ */}
                        {!selectedChat && (
                            <div style={{ 
                                display: 'flex', 
                                alignItems: 'center', 
                                justifyContent: 'center', 
                                height: '100%',
                                width: '100%',
                                color: '#8e9297'
                            }}>
                                <h3>–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è</h3>
                            </div>
                        )}
                    </>
                )}
            </div>
        </div>
    );
};

const ServerPageWrapper = ({ user, onJoinVoiceChannel, voiceRoom, isVoiceChatVisible, leftVoiceChannel, setLeftVoiceChannel, isMuted, isAudioEnabled, onToggleMute, onToggleAudio, voiceChannelUsers, onServerChatSelected }) => {
    console.log('üñ•Ô∏è ServerPageWrapper rendering:', { voiceRoom: !!voiceRoom, isVoiceChatVisible, leftVoiceChannel });
    // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—ã—Ö–æ–¥–µ –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    const LeftVoiceChannelComponent = () => (
        <div style={{
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            justifyContent: 'center',
            height: '100%',
            width: '100%',
            backgroundColor: '#36393f',
            color: '#dcddde'
        }}>
            <h2 style={{ margin: '0 0 16px 0', fontSize: '24px', fontWeight: '600' }}>
                –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª
            </h2>
            <p style={{ margin: 0, fontSize: '16px', color: '#8e9297' }}>
                –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            </p>
        </div>
    );
    const { serverId, chatId } = useParams();
    const [selectedChat, setSelectedChat] = useState(null);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ –∏–∑ ServerPage
    const handleChatSelected = (chat) => {
        if (chat) {
            setSelectedChat(chat);
            // –î–æ–±–∞–≤–ª—è–µ–º serverId –∫ –¥–∞–Ω–Ω—ã–º —á–∞—Ç–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–∏ —Å–±—Ä–æ—Å–∞
            onServerChatSelected({
                ...chat,
                serverId: serverId
            });
            
            // –£–±–∏—Ä–∞–µ–º –Ω–∞–¥–ø–∏—Å—å –æ –≤—ã—Ö–æ–¥–µ –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ª—é–±–æ–≥–æ —á–∞—Ç–∞
            setLeftVoiceChannel(false);
            
            // –ï—Å–ª–∏ —ç—Ç–æ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª, –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –Ω–µ–º—É
            if (chat.chatType === 4 || chat.typeId === 4) {
                onJoinVoiceChannel({
                    roomId: chat.chatId,
                    roomName: chat.groupName, // –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ —ç—Ç–æ groupName
                    userName: user.username,
                    userId: user.userId,
                    serverId: serverId
                });
            }
        }
    };
    
    return (
        <div style={{ display: 'flex', width: '100%', height: '100%' }}>
            <div style={{ width: '240px', minWidth: '240px', borderRight: '1px solid #2f3136' }}>
                <ServerPage
                    username={user?.username}
                    userId={user?.userId}
                    serverId={serverId}
                    initialChatId={chatId}
                    onChatSelected={handleChatSelected}
                    voiceRoom={voiceRoom}
                    isMuted={isMuted}
                    isAudioEnabled={isAudioEnabled}
                    onToggleMute={onToggleMute}
                    onToggleAudio={onToggleAudio}
                    voiceChannelUsers={voiceChannelUsers}
                />
            </div>
            
            <div className="server-content" style={{ flex: 1, width: 'calc(100% - 240px)', height: '100%' }}>
                {/* –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã—Ö–æ–¥–µ –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ */}
                {leftVoiceChannel && !voiceRoom ? (
                    <LeftVoiceChannelComponent />
                ) : (
                    <>
                        {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è VoiceChat –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ */}
                        <div id="voice-chat-container-server" style={{ 
                            width: '100%', 
                            height: '100%',
                            display: isVoiceChatVisible ? 'block' : 'none'
                        }} />
                        
                        {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º GroupChat –µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç –ò –≥–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç –Ω–µ –≤–∏–¥–∏–º—ã–π */}
                        {selectedChat && !isVoiceChatVisible && (
                            <GroupChat
                                username={user?.username}
                                userId={user?.userId}
                                chatId={selectedChat.chatId}
                                groupName={selectedChat.groupName || selectedChat.name}
                                isServerChat={true}
                                serverId={serverId}
                                userPermissions={selectedChat.userPermissions}
                                isServerOwner={selectedChat.isServerOwner}
                            />
                        )}
                        
                        {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –µ—Å–ª–∏ –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ –∏ –≥–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç –Ω–µ –≤–∏–¥–∏–º—ã–π */}
                        {!selectedChat && !isVoiceChatVisible && (
                            <div className="no-chat-selected" style={{ 
                                display: 'flex', 
                                alignItems: 'center', 
                                justifyContent: 'center', 
                                height: '100%',
                                width: '100%',
                                color: '#8e9297'
                            }}>
                                <h3>–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è</h3>
                            </div>
                        )}
                    </>
                )}
            </div>
        </div>
    );
};

export default Home;